name: Merge Main into Open RCs

on:
  push:
    branches:
      - 'main'

permissions:
  pull-requests: write
  issues: write
  contents: write

jobs:
  main:
    concurrency:
      group: "main to rcs ${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
      cancel-in-progress: true
    name: Create PRs from Main to open and non-draft RCs, set to auto-merge if it's viable
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: pull-request
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Function to clean up stale branches and PRs
          cleanup_stale() {
            local branch=$1
            local temp_branch=$2
            # Delete the temporary branch if it exists
            git push origin --delete $temp_branch 2>/dev/null || true
            # Find and close any existing backmerge PRs for this RC
            gh pr list --base $branch --label "ðŸ”§ Automated Backmerge" --state open --json number | jq -r '.[].number' | while read pr_number; do
              if [ "$pr_number" != "$TARGET_PR" ]; then
                gh pr close $pr_number --delete-branch
              fi
            done
          }

          # Function to notify RC PR about backmerge status
          notify_rc_pr() {
            local rc_pr=$1
            local backmerge_pr=$2
            local status=$3
            local message=$4
            gh pr comment $rc_pr --body "ðŸ”§ **Backmerge Status Update**: $status\n$message\n\nBackmerge PR: #$backmerge_pr"
          }

          while IFS=$'\t' read -r branch number; do
            # Clean up any existing backmerge PRs for this RC
            cleanup_stale $branch "main-to-$number-*"

            TEMP_BRANCH_NAME="main-to-$number-${{ github.event.push.after }}"
            git checkout -b $TEMP_BRANCH_NAME
            git push origin $TEMP_BRANCH_NAME

            # Create the backmerge PR
            gh pr create --title "[Automated] Backmerge main into ${branch} (for PR #${number})" \
              --body "Automated Backmerge PR. This should be enabled to auto-merge if all checks pass - if it seems to be lingering, check if manual resolution is needed.\n\nThis PR will be automatically approved and merged if all checks pass. If it fails to merge, please check for:\n- Merge conflicts\n- Failing tests\n- Other issues\n\nRC PR: #$number" \
              --label "ðŸ”§ Automated Backmerge" \
              --head "$TEMP_BRANCH_NAME" \
              --base "$branch"

            # Get the backmerge PR number
            TARGET_PR=$(gh pr list --head $TEMP_BRANCH_NAME --state open --json number -q '.[0].number')

            gh pr merge $TARGET_PR --auto --merge

            if [[ -n "$TARGET_PR" ]]; then
              echo "TARGET_PR=$TARGET_PR" >> $GITHUB_ENV
              echo "RC_PR=$number" >> $GITHUB_ENV

              # Notify the RC PR about the backmerge attempt
              notify_rc_pr $number $TARGET_PR "Started" "A backmerge from main has been initiated. This PR will auto-merge if all checks pass. You can track progress in PR #$TARGET_PR."
            fi
          done < <(gh pr list -l "ðŸš€ Release Candidate" --json headRefName,number | jq -r '.[] | "\(.headRefName)\t\(.number)"')
      - name: approve-pr
        if: env.TARGET_PR != ''
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const result = await github.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: process.env.TARGET_PR,
              event: "APPROVE"
            })
            console.log(result.status)
